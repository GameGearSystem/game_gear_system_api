openapi: 3.0.0
info:
  title: API de Ejemplo
  version: 1.0.0
  description: Una API de ejemplo para demostrar Swagger en Node.js
servers:
  - url: 'http://localhost:3000/'
paths:
  /games:
    get:
      tags:
        - games
      summary: Get all games
      operationId: getGames
      security:
        - bearerAuth: []  # El nombre debe coincidir con el definido en components/securitySchemes
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Game'
    post:
      tags:
        - games
      summary: Create a game
      operationId: createGame
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GameCreateDto'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Game'
  /games/{uuid}:
    get:
      tags:
        - games
      summary: Get game by uuid
      operationId: getGame
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Game'
    put:
      tags:
        - games
      summary: Update game by uuid
      operationId: updateGame
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GameUpdateDto'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Game'
    delete:
      tags:
        - games
      summary: Delete game by uuid
      operationId: deleteGame
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: No Content
  /devices:
    get:
      tags:
        - devices
      summary: Get all devices
      operationId: getDevices
      security:
        - bearerAuth: []  # El nombre debe coincidir con el definido en components/securitySchemes
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Device'
    post:
      tags:
        - devices
      summary: Create a device
      operationId: createDevice
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeviceCreateDto'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
  /devices/{uuid}:
    get:
      tags:
        - devices
      summary: Get device by uuid
      operationId: getDevice
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
    put:
      tags:
        - devices
      summary: Update device by uuid
      operationId: updateDevice
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeviceUpdateDto'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
    delete:
      tags:
        - devices
      summary: Delete device by uuid
      operationId: deleteDevice
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: No Content
  /users:
    get:
      tags:
        - users
      summary: Get all users
      operationId: getUsers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post: 
      tags: 
        - users
      summary: Create a user
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterDto'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /users/me:
    get:
      tags:
        - users
      summary: Get user by token
      operationId: getUser
      security:
        - bearerAuth: []  # El nombre debe coincidir con el definido en components/securitySchemes
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /users/confirmation:
    get:
      tags:
        - users
      summary: Confirm user
      operationId: confirmUser
      parameters:
        - name: token
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User confirmed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserConfirmRedirect'
  /users/login:
    post:
      tags:
        - users
      summary: Login user
      operationId: loginUser
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
              required:
                - email
                - password
      responses:
        '200':
          description: User logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserLogin'
  /users/resend_confirmation:
    post:
      tags:
        - users
      summary: Resend confirmation email
      operationId: ResendEmail
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
              required:
                - email
      responses:
        '200':
          description: User resend email
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResendEmail'
  /users/forgot_password:
    post:
      tags:
        - users
      summary: Reset password email
      operationId: ResetPasswordEmail
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
              required:
                - email
      responses:
        '200':
          description: User reset password email
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResetPasswordEmail'
  /users/reset_password:
    post:
      tags:
        - users
      summary: Reset password
      operationId: ResetPassword
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                password:
                  type: string
                  format: password
              required:
                - token
                - password
      responses:
        '200':
          description: User reset password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResetPassword'
components:
  securitySchemes:
    bearerAuth:    # Puedes poner cualquier nombre a tu esquema de seguridad
      type: http
      scheme: bearer
      bearerFormat: JWT   # Opcional, útil para la documentación
  schemas:
    Game:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
    GameCreateDto:
      type: object
      required:
        - name
        - description
      properties:
        name:
          type: string
        description:
          type: string
    GameUpdateDto:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
    Device:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
    DeviceCreateDto:
      type: object
      required:
        - name
        - description
      properties:
        name:
          type: string
        description:
          type: string
    DeviceUpdateDto:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
    User:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        name:
          type: string
        email:
          type: string
          format: email
    UserCreateDto:
      type: object
      required:
        - name
        - email
        - password
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          format: password
    RegisterDto:
      type: object
      required:
        - user
      properties:
        user:
          $ref: '#/components/schemas/UserCreateDto'
    UserConfirmRedirect:
      type: object
      properties:
        redirect:
          type: string
          format: uri
    UserLogin:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
      required:
        - email
        - password
    UserResendEmail:
      type: object
      properties:
        email:
          type: string
          format: email
      required:
        - email
    UserResetPasswordEmail:
      type: object
      properties:
        email:
          type: string
          format: email
      required:
        - email
    UserResetPassword:
      type: object
      properties:
        token:
          type: string
        password:
          type: string
          format: password
      required:
        - token
        - password
    